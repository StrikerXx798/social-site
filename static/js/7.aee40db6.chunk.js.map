{"version":3,"sources":["common/FormsControls/FormsControls.tsx","common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/Login/Login.module.css","components/Login/Login.tsx"],"names":["FormControl","meta","touched","error","children","hasError","className","s","formControl","messageError","Textarea","props","input","restProps","Input","createField","placeholder","name","validate","component","classForDiv","text","module","exports","required","value","maxLengthCreator","length","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","loginForm","undefined","type","rememberMe","checkbox","captchaUrl","src","alt","sform","formSummaryError","connect","state","isAuth","auth","login","to","container","formData","email","password","captcha"],"mappings":"gRAOaA,EAA2C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACxEC,EAAWH,GAAWC,EAC5B,OAAO,yBAAKG,UAAS,UAAKC,IAAEC,YAAP,YAAuBH,EAAWE,IAAEJ,MAAQ,KAC5DC,EACAC,GAAY,yBAAKC,UAAWC,IAAEE,cAC1BN,KAKAO,EAAwC,SAACC,GAAW,IACtDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBV,KAD8C,YACxBU,EADwB,mBAE5D,OAAO,kBAACX,EAAgBW,EAAO,8CAAcC,EAAWC,MAG/CC,EAAqC,SAACH,GAAW,IACnDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBV,KAD2C,YACrBU,EADqB,mBAEzD,OAAO,kBAACX,EAAgBW,EAAO,2CAAWC,EAAWC,MAGlD,SAASE,EACZC,EACAC,EACAC,EACAC,EACAC,GAGF,IAFET,EAEH,uDAFW,GACRU,EACH,uDADU,GAEP,OACI,yBAAKf,UAAWc,GACZ,kBAAC,IAAD,eACIJ,YAAaA,EACbC,KAAMA,EACNC,SAAUA,EACVC,UAAWA,GACPR,IACPU,K,oBC3CbC,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,aAAe,oCAAoC,iBAAmB,0C,iCCC9K,oEAAO,IAAMC,EAA+B,SAACC,GACzC,IAAIA,EACJ,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAwC,SAACF,GACrE,GAAGA,GAASA,EAAME,QAAUA,EAAQ,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCRxCL,EAAOC,QAAU,CAAC,UAAY,yBAAyB,UAAY,yBAAyB,MAAQ,8CAA8C,SAAW,wBAAwB,WAAa,4B,iCCDlM,yHAgCMK,EAAiBC,YAAkD,CAACC,KAAM,SAAzDD,EAfoF,SAAClB,GACxG,OAAM,0BAAMoB,SAAUpB,EAAMqB,aAAc1B,UAAWC,IAAE0B,WAClDlB,YAAqC,QAAQ,QAAS,CAACS,KAAUV,SAAMoB,EAAU,CAAC5B,UAAWC,IAAEK,OAAO,MACtGG,YAAqC,cAAc,WAAW,CAACS,KAAUV,SAAMoB,EAAU,CAAC5B,UAAWC,IAAEK,MAAOuB,KAAM,YAAY,MAChIpB,iBAAqCmB,EAAU,aAAa,GAAI,QAC7D3B,IAAE6B,WAAW,CAACD,KAAM,WAAY7B,UAAWC,IAAE8B,UAAU,eAC1D1B,EAAM2B,YAAc,6BACjB,yBAAKC,IAAK5B,EAAM2B,WAAYE,IAAI,YAC/BzB,YAAqC,SAAS,UAAU,CAACS,KAAUV,SAAMoB,EAAU,CAAC5B,UAAWC,IAAEK,OAAO,OAE5GD,EAAMR,OAAS,yBAAKG,UAAWmC,IAAMC,kBAAmB/B,EAAMR,OAC/D,kBAAC,IAAD,CAAWc,KAAK,eAwCT0B,uBALS,SAACC,GAAD,MAA4C,CAChEC,OAAQD,EAAME,KAAKD,OACnBP,WAAYM,EAAME,KAAKR,cAGc,CAACS,WAA3BJ,EAhBmD,SAAChC,GAK/D,OAAGA,EAAMkC,OAAe,kBAAC,IAAD,CAAUG,GAAI,aAChC,yBAAK1C,UAAWC,IAAE0C,WACpB,qCACA,kBAACrB,EAAD,CAAgBU,WAAY3B,EAAM2B,WAAYP,SAPjC,SAACmB,GAAmC,IAC1CC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,SAAUhB,EAAuBc,EAAvBd,WAAYiB,EAAWH,EAAXG,QACpC1C,EAAMoC,MAAMI,EAAOC,EAAUhB,EAAYiB","file":"static/js/7.aee40db6.chunk.js","sourcesContent":["import React from \"react\";\nimport s from \"./FormsControls.module.css\"\nimport {Field, WrappedFieldInputProps, WrappedFieldProps} from \"redux-form\";\nimport {FieldValidatorType} from \"../../utils/validators/validators\";\n\n\n\nexport const FormControl: React.FC<WrappedFieldProps> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return <div className={`${s.formControl} ${(hasError ? s.error : \"\")}`}>\n        {children}\n        {hasError && <div className={s.messageError}>\n            {error}\n        </div>}\n    </div>\n};\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\n};\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\n};\n\nexport function createField <FormKeysType extends string>  (\n    placeholder: string | undefined,\n    name: FormKeysType,\n    validate: Array<FieldValidatorType>,\n    component: string | React.FC<WrappedFieldProps>,\n    classForDiv: string | undefined,\n    props = {},\n    text = \"\" as string | null\n){\n    return (\n        <div className={classForDiv}>\n            <Field\n                placeholder={placeholder}\n                name={name}\n                validate={validate}\n                component={component}\n                {...props}/>\n            {text}\n        </div>\n    );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3zCp_\",\"error\":\"FormsControls_error__3JYew\",\"messageError\":\"FormsControls_messageError__28IDB\",\"formSummaryError\":\"FormsControls_formSummaryError__1mX5B\"};","export type FieldValidatorType = (value: string) => string | undefined;\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) return undefined;\n    return \"field is required\"\n};\n\n\nexport const maxLengthCreator = (length: number): FieldValidatorType => (value) =>{\n    if(value && value.length >= length) return `Max length is ${length} symbols`;\n    return undefined;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__2sePK\",\"loginForm\":\"Login_loginForm__3rK4F\",\"input\":\"Login_input__2QJzs index_commonInput__2d6jI\",\"checkbox\":\"Login_checkbox__jD_gI\",\"rememberMe\":\"Login_rememberMe__1EMV2\"};","import React from 'react';\nimport s from './Login.module.css'\nimport sform from '../../common/FormsControls/FormsControls.module.css'\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Input} from \"../../common/FormsControls/FormsControls\";\nimport {required} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../redux/auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {BigButton} from \"../common/Buttons/Buttons\";\nimport {AppStateType} from \"../../redux/redux-store\";\n\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = (props) => {\n    return<form onSubmit={props.handleSubmit} className={s.loginForm}>\n        {createField<LoginFormValuesKeysType>(\"Email\",\"email\", [required],Input,undefined,{className: s.input},null)}\n        {createField<LoginFormValuesKeysType>(\"Password...\",\"password\",[required],Input,undefined,{className: s.input, type: \"password\"},null)}\n        {createField<LoginFormValuesKeysType>(undefined,\"rememberMe\",[] ,\"input\",\n            s.rememberMe,{type: \"checkbox\", className: s.checkbox},\"remember me\")}\n        {props.captchaUrl && <div>\n            <img src={props.captchaUrl} alt=\"captcha\"/>\n            {createField<LoginFormValuesKeysType>(\"Key...\",\"captcha\",[required],Input,undefined,{className: s.input},null)}\n        </div>}\n        {props.error && <div className={sform.formSummaryError}>{props.error}</div>}\n        <BigButton name=\"Submit\"/>\n    </form>\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\n\ntype MapStatePropsType = {\n    captchaUrl: string | null\n    isAuth: boolean\n}\ntype MapDispatchPropsType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\n}\n\ntype LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\ntype LoginFormValuesKeysType = keyof LoginFormValuesType;\n\n\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n    const onSubmit = (formData: LoginFormValuesType) => {\n        const {email, password, rememberMe, captcha} = formData;\n        props.login(email, password, rememberMe, captcha);\n    };\n    if(props.isAuth) return <Redirect to={\"/profile\"} />;\n    return<div className={s.container}>\n        <h1>LOGIN</h1>\n        <LoginReduxForm captchaUrl={props.captchaUrl} onSubmit={onSubmit}/>\n    </div>\n};\nconst mapStateToProps = (state: AppStateType): MapStatePropsType =>({\n    isAuth: state.auth.isAuth,\n    captchaUrl: state.auth.captchaUrl,\n});\n\nexport default connect( mapStateToProps, {login})(Login);"],"sourceRoot":""}