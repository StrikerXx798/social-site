{"version":3,"sources":["serviceWorker.js","components/Navbar/Friends/Friends.tsx","components/Navbar/Friends/FriendsContainer.tsx","components/Navbar/Navbar.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/NotFound/NotFound.tsx","ErrorBoundary/ErrorBoundary.jsx","components/tests/tests.ts","components/tests/TestPage.jsx","App.js","index.js","redux/auth-reducer.ts","components/common/Buttons/Buttons.module.css","components/Navbar/Navbar.module.css","components/Navbar/Friends/Friends.module.css","api/api.ts","redux/dialogs-reducer.ts","components/common/Buttons/Buttons.tsx","common/Preloader/Preloader.tsx","components/Header/Header.module.css","components/NotFound/NotFound.module.css","redux/profile-reducer.ts","utils/object-helpers.js","redux/users-reducer.ts","assets/images/preloader.svg","assets/images/logoSite.png","assets/images/404NotFound.jpg","assets/images/oopsPhoto.jpg","ErrorBoundary/ErrorBoundary.module.css"],"names":["Boolean","window","location","hostname","match","Friend","props","className","s","friend","src","img","alt","name","Friends","friendsElements","friends","map","key","container","header","FriendsContainer","connect","state","sidebar","linksArr","to","isNeedCount","Navbar","nav","el","activeClassName","activeLink","item","newMessagesCount","initialState","initialized","globalError","appReducerActionCreators","initializedSuccess","type","setGlobalError","errorMessage","appReducer","action","id","sidebarReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","usersPage","usersReducer","auth","authReducer","form","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Header","logo","loginBlock","isAuth","login","callback","logout","history","push","HeaderContainer","this","getAuthUserData","React","Component","withRouter","NotFound","notFoundPhoto","ErrorBoundary","hasError","oopsPhoto","children","console","log","age","TestPage","test","Settings","lazy","Music","News","DialogsContainer","UsersContainer","ProfileContainer","Login","App","catchAllUnhandledErrors","reason","showGlobalError","toJSON","message","intervalId","initializeApp","getNewMessages","addEventListener","prevProps","prevState","snapshot","setInterval","clearInterval","removeEventListener","exact","path","render","Suspense","fallback","Preloader","newMessagessCount","userId","params","pageTitle","AppContainer","dispatch","setTimeout","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","email","captchaUrl","a","authAPI","me","meData","resultCode","data","authReducerActionCreators","setUserData","password","rememberMe","captcha","ResultCodesEnum","Success","ResultCodeForCaptcha","CaptchaIsRequired","getCaptchaUrl","messages","length","stopSubmit","_error","securityAPI","response","url","getCaptchaUrlSucces","payload","module","exports","instance","axios","create","withCredentials","baseURL","headers","userAPI","getUsers","currentPage","pageSize","get","follow","post","unfollow","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","res","dialogsAPI","getDialogs","startDialog","getMessages","items","totalCount","sendMessage","body","getNewMessagesCount","getMessagesNewerThenLast","date","deleteMessageForOwner","messageId","restoreMessage","addToSpam","dialogs","selectedDialogId","needRefresh","currentDialogMessagesCount","deletedMessages","dialogsReduserActionCreators","getDialogsSuccess","setNeedRefresh","putUpDialog","getState","dialog","find","d","viewed","addedAt","result","some","m","getMessagesSuccess","setHasNewMessages","init","setCurrentDialog","updateDialog","count","setNewMessagesCount","Number","restoredInterval","deleteMessageForOwnerSuccess","addDeletedMessages","appendMessages","interval","restoreMessageSuccess","addMessageToSpam","addToSpamSuccess","filter","hasNewMessages","BigButton","onClick","button","SmallButton","disabled","cn","smallButton","PagesButton","pagesButton","notVisible","isVisible","AddFileButton","addFileButton","htmlFor","onChange","preloader","postsData","likesCount","newPostText","getUserProfile","profileReducerActionCreators","setUserProfile","setStatus","file","sevePhotoSuccess","photos","split","toLocaleLowerCase","slice","Promise","reject","newPost","toString","postId","p","addPost","deletePost","updatePost","updateObjectInArray","itemId","objPropName","newObjProp","i","users","totalUsersCount","isFetching","followingInProgress","requestUsers","followed","page","usersReducerActionCreators","toggleIsFetching","setUsers","setCurrentPage","setTotalUsersCount","_followUnfollowFlow","apiMethod","actionCreator","toggleFollowingInProgress","bind","followSuccess","unfollowSuccess"],"mappings":"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","file":"static/js/main.ba383b0f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport s from './Friends.module.css'\nimport {FriendSidebarType} from \"../../../types/types\";\n\ntype FriendPropsType = {\n    friend: FriendSidebarType\n}\n\nconst Friend: React.FC<FriendPropsType> = (props) => {\n  return (\n      <div className={s.friend}>\n          <img src={props.friend.img} alt=\"ava\"/>\n          <div>{props.friend.name}</div>\n      </div>\n  )\n};\n\n\ntype FriendsPropsType = {\n    friends: Array<FriendSidebarType>\n}\nconst Friends: React.FC<FriendsPropsType> = (props) => {\n\n    const friendsElements = props.friends.map(\n        friend => <Friend key={friend.name} friend={friend}/>\n    );\n\n    return (\n        <div className={s.container}>\n          <div className={s.header}>Friends</div>\n      <div className={s.friends}>\n          {friendsElements}\n      </div>\n        </div>\n    )\n};\n\nexport default Friends;","\nimport {connect} from \"react-redux\";\nimport Friends from \"./Friends\";\nimport {FriendSidebarType} from \"../../../types/types\";\nimport {AppStateType} from \"../../../redux/redux-store\";\n\ntype MapStateProps = {\n    friends: Array<FriendSidebarType>\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateProps => {\n    return {\n        friends: state.sidebar.friends\n    }\n};\n\nconst mapDispatchToProps = () => {\n    return {}\n};\n\nlet FriendsContainer = connect(mapStateToProps, mapDispatchToProps)(Friends);\n\nexport default FriendsContainer;","import React from 'react';\nimport s from './Navbar.module.css'\nimport {NavLink} from \"react-router-dom\";\nimport FriendsContainer from \"./Friends/FriendsContainer\";\n\ntype PropsType = {\n    newMessagesCount: number\n}\n\nconst linksArr = [\n    {name: 'Profile', to: 'profile', isNeedCount: false},\n    {name: 'Messages', to: 'dialogs', isNeedCount: true},\n    {name: 'Users', to: 'users', isNeedCount: false},\n    {name: 'News', to: 'news', isNeedCount: false},\n    {name: 'Music', to: 'music', isNeedCount: false},\n    {name: 'Settings', to: 'settings', isNeedCount: false},\n    {name: 'Tests', to: 'test', isNeedCount: false},\n];\n\nconst Navbar = (props: PropsType) => {\n    return (\n        <nav className={s.nav}>\n            {linksArr.map(el => (\n                <NavLink to={`/${el.to}`}  activeClassName={s.activeLink}>\n                    <div className={s.item}>\n                        {el.name}\n                        {el.isNeedCount &&\n                        props.newMessagesCount>0 &&\n                        <div className={s.newMessagesCount}>{props.newMessagesCount}</div>\n                        }\n                    </div>\n                </NavLink>\n                )\n            )}\n            <FriendsContainer/>\n        </nav>\n    )\n};\n\nexport default Navbar;","import {getAuthUserData} from \"./auth-reducer\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {ActionsTypes, AppStateType} from \"./redux-store\";\n\n\nlet initialState = {\n    initialized: false,\n    globalError: \"\",\n};\ntype InitialStateType = typeof initialState;\n\nconst appReducer = (state = initialState, action: AppReducerActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'INITIALIZED_SUCCESS':\n            return {\n                ...state,\n                initialized: true,\n            };\n        case 'SET_GLOBAL_ERROR':\n            return {\n                ...state,\n                globalError: action.errorMessage\n            };\n        default:\n            return state;\n    }\n};\n\ntype AppReducerActionsTypes = ActionsTypes<typeof appReducerActionCreators>;\n\ntype ThunkType = ThunkAction<void, AppStateType, unknown, AppReducerActionsTypes>;\n\nexport const initializeApp = (): ThunkType => (dispatch) => {\n    let promise = dispatch(getAuthUserData());\n    Promise.all([promise]).then(() => {\n        dispatch(appReducerActionCreators.initializedSuccess())\n    });\n};\n\nexport const setGlobalErrorOnTime = (errorMessage: string): ThunkType => (dispatch: any) => {\n    dispatch(appReducerActionCreators.setGlobalError(errorMessage));\n    setTimeout(() => {\n        dispatch(appReducerActionCreators.setGlobalError(\"\"));\n    }, 5000)\n};\n\n\nexport const appReducerActionCreators = {\n    initializedSuccess: () => ({type: 'INITIALIZED_SUCCESS'} as const),\n    setGlobalError: (errorMessage: string) => ({type: 'SET_GLOBAL_ERROR', errorMessage} as const),\n};\n\nexport default appReducer;","import {ActionsTypes} from \"./redux-store\";\n\nlet initialState = {\n    friends: [\n        {\n            id: 1,\n            name: 'Jey',\n            img: 'https://yt3.ggpht.com/a/AGF-l78XZgyutXUlON-U4sTy-EwaZoBJXrqGvQ2kxg=s900-c-k-c0xffffffff-no-rj-mo'\n        },\n        {\n            id: 2,\n            name: 'Kristin',\n            img: 'https://yt3.ggpht.com/a/AGF-l78XZgyutXUlON-U4sTy-EwaZoBJXrqGvQ2kxg=s900-c-k-c0xffffffff-no-rj-mo'\n        },\n        {\n            id: 3,\n            name: 'Mike',\n            img: 'https://yt3.ggpht.com/a/AGF-l78XZgyutXUlON-U4sTy-EwaZoBJXrqGvQ2kxg=s900-c-k-c0xffffffff-no-rj-mo'\n        },\n    ]\n};\n\nexport type SidebarInitialStateType = typeof initialState;\n\nconst sidebarReducer = (state = initialState, action: SidebarReducerActionsTypes): SidebarInitialStateType => {\n    switch (action.type) {\n        default:\n            return state;\n    }\n};\n\ntype SidebarReducerActionsTypes = ActionsTypes<typeof sidebarReducerActionCreactors>\n\nexport const sidebarReducerActionCreactors = {};\n\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport profileReducer from \"./profile-reducer\";\nimport dialogsReducer from \"./dialogs-reducer\";\nimport sidebarReducer from \"./sidebar-reducer\";\nimport usersReducer from \"./users-reducer\";\nimport authReducer from \"./auth-reducer\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { reducer as formReducer } from 'redux-form'\nimport appReducer from \"./app-reducer\";\n\n\n\nlet rootReducer = combineReducers({\n    profilePage : profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer,\n});\n\ntype RootReducerType = typeof rootReducer;\n\nexport type AppStateType = ReturnType<RootReducerType>\n\n\ntype PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never;\nexport type ActionsTypes<T extends {[key: string]: (...args: any[]) =>any}> = ReturnType<PropertiesTypes<T>>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers( applyMiddleware(thunkMiddleware)))\n// @ts-ignore\nwindow.store = store;\nexport default store;","import React from 'react';\nimport s from './Header.module.css';\nimport {BigButton} from \"../common/Buttons/Buttons\";\nimport logo from '../../assets/images/logoSite.png'\n/*\ntype PropsType = {\n    login: null | string\n    logout: ()=>void\n\n}*/\n\nconst Header = (props) => {\n    return (\n        <header className={s.header}>\n            <img\n                src={logo}\n                alt=\"\"/>\n            <div className={s.loginBlock}>\n                {props.isAuth ? <div>{props.login} <BigButton name=\"Logout\" callback={props.logout}/></div> :\n                    <BigButton callback={()=>{props.history.push(\"/login\")}} name=\"Sign In\"/>}\n            </div>\n        </header>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport {getAuthUserData, logout} from \"../../redux/auth-reducer\";\nimport {compose} from \"redux\";\nimport {withRouter} from \"react-router-dom\";\nimport {AppStateType} from \"../../redux/redux-store\";\n/*\n\ntype MapStatePropsType = {\n    login: null | string\n    isAuth: boolean\n}\ntype MapDispatchPropsType = {\n    getAuthUserData: () => void\n    logout: () => void\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\n*/\n\nclass HeaderContainer extends React.Component{\n\n    componentDidMount() {\n        this.props.getAuthUserData();\n    }\n\n    render() {\n        return <Header {...this.props}/>\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    login: state.auth.login,\n    isAuth: state.auth.isAuth\n});\n\nexport default compose(\n    withRouter,\n    connect(mapStateToProps, {getAuthUserData, logout}))(HeaderContainer);","import React from 'react';\nimport notFoundPhoto from '../../assets/images/404NotFound.jpg'\nimport s from './NotFound.module.css'\n\nconst NotFound: React.FC = () =>{\n    return <div className={s.container}><img className={s.img} src={notFoundPhoto} alt=\"404 not found\" /></div>\n};\n\nexport default NotFound;","import React from 'react'\nimport oopsPhoto from '../assets/images/oopsPhoto.jpg'\nimport s from './ErrorBoundary.module.css'\n\nclass ErrorBoundary extends React.Component {\n    state = {\n        hasError: false,\n    };\n    static getDerivedStateFromError() {\n        return {hasError: true};\n    }\n    // componentDidCatch(error, errorInfo) {\n    //     debugger;\n    //     this.setState({hasError: true})\n    // }\n    render() {\n        if (this.state.hasError) {\n         return <div className={s.container}><img src={oopsPhoto} alt=\"\"/><h1>Sorry, some error</h1></div>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export const bla = 56;\n\ntype UserType = {\n    firstName: string\n    lastName: string\n    age: number\n}\ntype PhotoType = {\n    large: string\n    small: string\n}\n\ntype CrazyType<T> = T extends 'user' ? UserType\n    : T extends  'photo' ? PhotoType : never\n\ntype MyReturnType<T> = T extends (...args: any[]) => infer R ? R : never;\nlet a: CrazyType<'user' | 'photo'> = {\n    firstName: 'Nikky',\n    lastName: 'Borb',\n    age: 20\n};\n\nlet b: CrazyType<'photo'> = {\n    large: 'https://nikky.by/1.png',\n    small: 'https://nikky.by/2.png',\n};\n\nconst obj = {\n    a: {name: 'Nikky'},\n    b: {age: 56},\n    c: {site: {title: 'https://lll.by'}},\n};\n\n//type ObjKeysType = typeof obj.a | typeof obj.b | typeof obj.c;\n\ntype ObjPropertiesType<T> = T extends {[key: string]: infer U} ? U : never\n\nconst actions = {\n    AC1: (age: number) => ({type: 'SET_AGE', age} as const),\n    AC2: (firstName: string, lastName: string) => ({type: 'SET_NAME', firstName, lastName} as const)\n};\n\nlet actionValueType: ReturnType<ObjPropertiesType<typeof actions>> = {type: \"SET_AGE\", age: 8}\n\nconsole.log(actionValueType)\n\n\n\n","import React from \"react\";\nimport * as tests from './tests'\n\nclass TestPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            test: false,\n        };\n    }\n\n    render() {\n        return (\n            <div>TEST</div>\n        );\n    }\n}\n\nexport default TestPage;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar.tsx';\nimport {BrowserRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport PropTypes from 'prop-types'\nimport {connect, Provider} from \"react-redux\";\nimport {appReducerActionCreators, setGlobalErrorOnTime} from \"./redux/app-reducer\";\nimport Preloader from \"./common/Preloader/Preloader\";\nimport {compose} from \"redux\";\nimport store from \"./redux/redux-store\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport NotFound from \"./components/NotFound/NotFound\";\nimport ErrorBoundary from \"./ErrorBoundary/ErrorBoundary\";\nimport {getNewMessages} from \"./redux/dialogs-reducer\";\nimport TestPage from \"./components/tests/TestPage\";\n\nconst Settings = React.lazy(() => import('./components/Settings/Settings'));\nconst Music = React.lazy(() => import('./components/Music/Music'));\nconst News = React.lazy(() => import('./components/News/News'));\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst Login = React.lazy(() => import('./components/Login/Login'));\n\nclass App extends React.Component {\n\n    catchAllUnhandledErrors = ({reason}) => {\n        this.props.showGlobalError(reason.toJSON().message);\n    };\n\n    componentDidMount() {\n        this.props.initializeApp();\n        this.props.getNewMessages();\n\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    };\n    intervalId=null;\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.isAuth && this.intervalId===null){\n            this.intervalId = setInterval(()=>{\n                this.props.getNewMessages();\n            }, 4000);\n        }\n        if(!this.props.isAuth){\n            clearInterval(this.intervalId);\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n        clearInterval(this.intervalId);\n    }\n    render() {\n        if (!this.props.initialized) return <div className=\"preloader\"><Preloader/></div>;\n        return (\n            <ErrorBoundary>\n                <div className='app-wrapper'>\n                    <HeaderContainer/>\n                    <Navbar newMessagesCount={this.props.newMessagesCount}/>\n                    <div className='app-wrapper-content'>\n                        <Switch>\n                            <Route exact path=\"/\" render={() => <Redirect to=\"/profile\"/>}/>\n                            <React.Suspense fallback={<Preloader/>}>\n                                <Route path=\"/dialogs/:userId?\"\n                                       render={(props) => <DialogsContainer newMessagessCount={this.props.newMessagesCount} userId={props.match.params.userId}/>}\n                                />\n                                <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\n                                <Route path=\"/users\" render={() => <UsersContainer pageTitle={'Samurai'}/>}/>\n                                <Route path=\"/news\" render={() => <News/>}/>\n                                <Route path=\"/music\" render={() => <Music/>}/>\n                                <Route path=\"/settings\" render={() => <Settings/>}/>\n                                <Route path=\"/login\" render={() => <Login/>}/>\n                                <Route path=\"/test\" render={()=><TestPage />} />\n                            </React.Suspense>\n                            <Route path=\"*\" render={() => <NotFound/>}/>\n                        </Switch>\n                    </div>\n                </div>\n            </ErrorBoundary>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    initialized: state.app.initialized,\n    globalError: state.app.globalError,\n    isAuth: state.auth.isAuth,\n    newMessagesCount: state.dialogsPage.newMessagesCount\n});\n\nconst AppContainer = compose(\n    withRouter,\n    connect(mapStateToProps, {\n        initializeApp: appReducerActionCreators.initializedSuccess,\n        showGlobalError: setGlobalErrorOnTime,\n        getNewMessages\n    }))(App);\n\nconst SamuraiJSApp = () => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n};\n\nexport default SamuraiJSApp;\n\nApp.propTypes = {\n    store: PropTypes.object,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport SamuraiJSApp from \"./App\";\n\n\n    ReactDOM.render( <SamuraiJSApp/>,document.getElementById('root') );\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {authAPI, ResultCodeForCaptcha, ResultCodesEnum, securityAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\"\nimport {ThunkAction} from \"redux-thunk\";\nimport {ActionsTypes, AppStateType} from \"./redux-store\";\n\nlet initialState = {\n    userId: null as number | null,\n    login: null as string | null,\n    email: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null,\n};\n\nexport type InitialStateType = typeof initialState;\n\nconst authReducer = (state = initialState, action: AuthReducerActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SET_USER_DATA':\n        case 'GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\ntype AuthReducerActionsTypes = ActionsTypes<typeof authReducerActionCreators>;\n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, AuthReducerActionsTypes>;\n\n/*export const getAuthUserData = () => {\n    return (dispatch) => {\n        return authAPI.me().then(data => {\n                if (data.resultCode === 0) {\n                    const {id, login, email} = data.data;\n                    dispatch(setUserData(id, login, email, true));\n                }\n            }\n        );\n    };\n};*/\n\n\nexport const getAuthUserData = () => async (dispatch: any) => {\n    let meData = await authAPI.me();\n    if (meData.resultCode === 0) {\n        const {id, login, email} = meData.data;\n        dispatch(authReducerActionCreators.setUserData(id, login, email, true));\n    }\n};\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\n     let data = await authAPI.login(email, password, rememberMe, captcha);\n         if(data.resultCode === ResultCodesEnum.Success) {\n             dispatch(getAuthUserData())\n         } else {\n             if(data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired)  dispatch(getCaptchaUrl());\n             let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n             // @ts-ignore\n             dispatch(stopSubmit(\"login\", {_error: message}));\n         }\n};\n\nexport const logout = (): ThunkType => async (dispatch) => {\n    let data = await authAPI.logout();\n         if(data.resultCode === ResultCodesEnum.Success) {\n             dispatch(authReducerActionCreators.setUserData(null, null, null, false))\n         }\n};\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n    const response = await securityAPI.getCaptchaUrl();\n    const captchaUrl = response.url;\n    dispatch(authReducerActionCreators.getCaptchaUrlSucces(captchaUrl));\n};\n\nexport const authReducerActionCreators = {\n    setUserData: (userId: number | null, login: string | null, email: string | null, isAuth: boolean) => (\n        {\n            type: 'SET_USER_DATA',\n            payload: {userId, login, email, isAuth}}\n    ),\n    getCaptchaUrlSucces: (captchaUrl: string) => ({type: 'GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}})\n};\n\nexport default authReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__2eQKC\",\"smallButton\":\"Buttons_smallButton__1Jsex\",\"container\":\"Buttons_container__2azRG\",\"disabled\":\"Buttons_disabled__1kKZn\",\"pagesButton\":\"Buttons_pagesButton__2pL9a\",\"notVisible\":\"Buttons_notVisible__1SLSF\",\"addFileButton\":\"Buttons_addFileButton__1gjdR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3q_0Z\",\"item\":\"Navbar_item__LOgOL\",\"activeLink\":\"Navbar_activeLink__YYTLs\",\"newMessagesCount\":\"Navbar_newMessagesCount__3LywA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"Friends_friend__1Kgc2\",\"friends\":\"Friends_friends__QjZXu\",\"header\":\"Friends_header__1T6F2\",\"container\":\"Friends_container__3y0dJ\"};","import axios from \"axios\";\nimport { DialogMessage, DialogType, PhotosType, ProfileType, UserType} from \"../types/types\";\nimport {number} from \"prop-types\";\n\nexport type CommonResponseType = {\n    data: {}\n    messages: Array<string>\n    resultCode: number\n}\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        'API-KEY': 'cfaface2-28da-4d76-88dc-dbbe029d9acd'\n    }\n});\n\ntype GetUsersResponseType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string | null\n};\nexport const userAPI = {\n    getUsers(currentPage: number, pageSize: number) {\n        return instance.get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => response.data)\n    },\n    follow(userId: number) {\n        return instance.post<CommonResponseType>(`follow/${userId}`)\n            .then(response => response.data)\n    },\n    unfollow(userId: number) {\n        return instance.delete<CommonResponseType>(`follow/${userId}`).then(response => response.data)\n    },\n};\n\n\ntype savePhotoResponseType = CommonResponseType & {\n    data: {\n        photos: PhotosType\n    }\n};\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/${userId}`)\n            .then(response => response.data);\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/${userId}`)\n            .then(response => {\n                return response.data\n            });\n    },\n    updateStatus(status: string) {\n        return instance.put<CommonResponseType>('/profile/status', {status}).then(response => response.data);\n    },\n    savePhoto(photoFile: any) {\n        const formData = new FormData();\n        formData.append(\"image\", photoFile);\n\n        return instance.put<savePhotoResponseType>('/profile/photo', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(response => response.data);\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put<CommonResponseType>('/profile', profile).then(res => res.data)\n    }\n\n};\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1,\n}\n\nexport enum ResultCodeForCaptcha {\n    CaptchaIsRequired = 10,\n}\n\n\ntype MeResponseType = {\n    data: {\n        id: number,\n        email: string,\n        login: string,\n    }\n    resultCode: ResultCodesEnum\n    messages: Array<string>\n};\ntype LoginResponseType = {\n    data: {\n        userId: number\n    }\n    resultCode: ResultCodesEnum | ResultCodeForCaptcha\n    messages: Array<string>\n}\ntype DeleteResponseType = {\n    resultCode: ResultCodesEnum\n    messages: Array<string>\n    data: {}\n}\nexport const authAPI = {\n    me() {\n        return instance.get<MeResponseType>(\"auth/me\")\n            .then(response => response.data);\n    },\n    login(email: string, password: string, rememberMe: boolean, captcha: null | string = null) {\n        return instance.post<LoginResponseType>(\"auth/login\", {email, password, rememberMe, captcha})\n            .then(response => response.data);\n    },\n    logout() {\n        return instance.delete<DeleteResponseType>(\"auth/login\").then(response => response.data);\n    },\n};\n\n\ntype GetCaptchaURLResponseType = {\n    url: string\n}\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.delete<GetCaptchaURLResponseType>(\"security/get-captcha-url\")\n            .then(res => {\n                return res.data\n            })\n    },\n};\n\ntype GetMessagesResponseType = {\n    error: null | string\n    items: Array<DialogMessage>\n    totalCount: number\n}\n\nexport const dialogsAPI = {\n    getDialogs() {\n        return instance.get<Array<DialogType>>(\"dialogs\").then(res => res.data)\n    },\n    startDialog(userId: number) {\n        return instance.put<CommonResponseType>(`dialogs/${userId}`).then(res => res.data)\n    },\n    getMessages(userId: number) {\n        return instance.get<GetMessagesResponseType>(`dialogs/${userId}/messages`).then(res => {\n                return {\n                    messages: res.data.items,\n                    totalCount: res.data.totalCount\n                }\n            }\n        )\n    },\n    sendMessage(userId: number, body: string) {\n        return instance.post<CommonResponseType>(`dialogs/${userId}/messages`, {body}).then(res => res.data)\n    },\n    getNewMessagesCount() {\n        return instance.get<number>('dialogs/messages/new/count')\n            .then(res => res.data);\n    },\n    getMessagesNewerThenLast(userId: number, date: string) {\n        return instance.get<Array<DialogMessage>>(`dialogs/${userId}/messages/new?newerThen=${date}`)\n            .then(res => res.data);\n    },\n    /*\n    checkOnViewed(messageId: string) {\n        return instance.get(`dialogs/messages/${messageId}/viewed`).then(res => res.data);\n    },*/\n    deleteMessageForOwner(messageId: string) {\n        return instance.delete<CommonResponseType>(`dialogs/messages/${messageId}`)\n            .then(res => res.data);\n    },\n    restoreMessage(messageId: string) {\n        return instance.put<CommonResponseType>(`dialogs/messages/${messageId}/restore`)\n            .then(res => res.data);\n    },\n    addToSpam(messageId: string) {\n        return instance.post<CommonResponseType>(`dialogs/messages/${messageId}/spam`)\n            .then(res => res.data);\n    },\n};\n\n","import {dialogsAPI, ResultCodesEnum} from \"../api/api\";\nimport {DeletedDialogMessageType, DialogMessage, DialogType} from \"../types/types\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {ActionsTypes, AppStateType} from \"./redux-store\";\n\n\n\nlet initialState = {\n    dialogs: [] as Array<DialogType>,\n    messages: [] as Array<DialogMessage>,\n    selectedDialogId: null as string | null,\n    newMessagesCount: 0,\n    needRefresh: false,\n    currentDialogMessagesCount: 0,\n    deletedMessages: [] as Array<DeletedDialogMessageType>,\n};\ntype InitialStateType = typeof initialState;\n\nconst dialogsReducer = (state = initialState, action: DialogReducerActionsTypes): InitialStateType => {\n    switch (action.type) {\n\n        case 'GET_DIALOGS_SUCCESS':\n        case 'SET_CURRENT_DIALOG':\n        case 'GET_MESSAGES_SUCCESS':\n        case 'SET_NEW_MESSAGES_COUNT':\n        case 'SET_NEED_REFRESH':\n            // @ts-ignore\n            return {\n                ...state,\n                ...action.payload\n            };\n        case 'PUT_UP_DIALOG':\n            const dialog = state.dialogs.find((d: DialogType) => d.id == action.userId);\n            if (dialog) {\n                return {\n                    ...state,\n                    dialogs: [dialog, ...state.dialogs.filter(d => d.id != action.userId)]\n                };\n            } else {\n                return state;\n            }\n        case 'DELETE_MESSAGE_FOR_OWNER':\n            return {\n                ...state,\n                messages: state.messages.filter(m => m.id !== action.messageId)\n            };\n        case 'SET_HAS_NEW_MESSAGES':\n            return {\n                ...state,\n                dialogs: state.dialogs.map(d => {\n                    // @ts-ignore\n                    if (d.id == action.userId) return {...d, hasNewMessages: action.hasNewMessages};\n                    else return d\n                })\n\n            };\n        case 'APPEND_MESSAGES':\n            return {\n                ...state, messages: [...state.messages, ...action.messages]\n            };\n        case 'ADD_DELETED_MESSAGES':\n            return {\n                ...state, deletedMessages: [...state.deletedMessages, action.message]\n            };\n        case 'RESTORE_MESSAGE':\n            return {\n                ...state, deletedMessages: state.deletedMessages.filter(m => m.id !== action.messageId)\n            };\n        case 'ADD_TO_SPAM_SUCCESS':\n            return {\n                ...state, messages: state.messages.filter(m => m.id !== action.messageId)\n            };\n        default:\n            return state;\n    }\n\n};\n\nexport const getDialogs = (): ThunkWithPromiseType => async (dispatch) => {\n    let dialogs = await dialogsAPI.getDialogs();\n    dispatch(dialogsReduserActionCreators.getDialogsSuccess(dialogs));\n};\n\nexport const sendMessage = (userId: number, body: string): ThunkWithPromiseType => async (dispatch) => {\n     await dialogsAPI.sendMessage(userId, body);\n    dispatch(dialogsReduserActionCreators.setNeedRefresh(true));\n    dispatch(dialogsReduserActionCreators.putUpDialog(userId));\n};\nexport const startDialog = (userId: number) => async (dispatch: any, getState: any) => {\n    await dialogsAPI.startDialog(userId);\n    let dialog = getState().dialogsPage.dialogs.find((d: any) => d.id == userId);\n    if (dialog) {\n        dispatch((dialogsReduserActionCreators.putUpDialog(userId)));\n    } else {\n        dispatch(getDialogs())\n    }\n};\n\n\n\n\nexport const getMessages = (userId: number, needRefresh = false): ThunkWithPromiseType => async (dispatch, getState) => {\n    let state = getState();\n    let messages = state.dialogsPage.messages;\n    if (messages.length > 0 && messages[messages.length - 1].viewed && !needRefresh) {\n        /*  dispatch(updateUnviewedMessages())*/\n        dispatch(getMessagesNewerThenLast(userId, messages[messages.length - 1].addedAt))\n    } else {\n        let result = await dialogsAPI.getMessages(userId);\n\n        if (result.messages.some((m: DialogMessage) => !m.viewed)) dispatch(dialogsReduserActionCreators.setNeedRefresh(true));\n        dispatch(dialogsReduserActionCreators.getMessagesSuccess(result.messages, result.totalCount));\n        dispatch(dialogsReduserActionCreators.setHasNewMessages(userId, false));\n    }\n};\n\nexport const init = (userId: number): ThunkWithPromiseType => async (dispatch) => {\n    if (!!userId) {\n        dispatch(getMessages(userId));\n        dispatch(dialogsReduserActionCreators.setCurrentDialog(userId));\n        await dispatch(startDialog(userId));\n        dispatch(getDialogs())\n\n    } else {\n        dispatch(getDialogs());\n    }\n};\n\nexport const updateDialog = (userId: number): ThunkType => (dispatch) => {\n    if (!!userId) {\n        dispatch(dialogsReduserActionCreators.setNeedRefresh(true));\n        dispatch(getMessages(userId, true));\n        dispatch(dialogsReduserActionCreators.setCurrentDialog(userId))\n    } else {\n        dispatch(dialogsReduserActionCreators.setCurrentDialog(null));\n    }\n};\nexport const getNewMessages = (): ThunkWithPromiseType => async (dispatch, getState) => {\n    let count = await dialogsAPI.getNewMessagesCount();\n    let state = getState();\n    if (state.dialogsPage.newMessagesCount !== count || state.dialogsPage.needRefresh) {\n        dispatch(dialogsReduserActionCreators.setNewMessagesCount(count));\n        dispatch(getDialogs());\n        dispatch(dialogsReduserActionCreators.setNeedRefresh(false));\n        if (state.dialogsPage.selectedDialogId !== null) {\n            dispatch(getMessages(Number(state.dialogsPage.selectedDialogId)));\n        }\n    }\n};\n\nexport const deleteMessageForOwner = (messageId: string): ThunkWithPromiseType => async (dispatch, getState) => {\n    let res = await dialogsAPI.deleteMessageForOwner(messageId);\n    if (res.resultCode === ResultCodesEnum.Success) {\n        const restoredInterval = <any>setTimeout(() => {\n            dispatch(dialogsReduserActionCreators.deleteMessageForOwnerSuccess(messageId));\n        }, 5000);\n        dispatch(dialogsReduserActionCreators.addDeletedMessages(messageId, restoredInterval));\n    }\n};\n\nexport const getMessagesNewerThenLast = (userId: number, date: string): ThunkWithPromiseType => async (dispatch, getState) => {\n    let messages = await dialogsAPI.getMessagesNewerThenLast(userId, date);\n    dispatch(dialogsReduserActionCreators.appendMessages(messages));\n};\nexport const restoreMessage = (messageId: string): ThunkWithPromiseType => async (dispatch, getState) => {\n    let res = await dialogsAPI.restoreMessage(messageId);\n    if (res.resultCode ===  ResultCodesEnum.Success) {\n        const deletedMessages = getState().dialogsPage.deletedMessages;\n        const interval = deletedMessages.find((m: any) => m.id === messageId);\n        if(interval) clearInterval(interval.restoredInterval);\n        dispatch(dialogsReduserActionCreators.restoreMessageSuccess(messageId));\n    }\n};\nexport const addMessageToSpam = (messageId: string): ThunkWithPromiseType => async (dispatch, getState) => {\n    let res = await dialogsAPI.addToSpam(messageId);\n    if (res.resultCode ===  ResultCodesEnum.Success) {\n        dispatch(dialogsReduserActionCreators.addToSpamSuccess(messageId));\n    }\n};\n\n\nexport default dialogsReducer;\n\n\ntype DialogReducerActionsTypes = ActionsTypes<typeof dialogsReduserActionCreators>;\n\ntype ThunkWithPromiseType = ThunkAction<Promise<void>, AppStateType, unknown, DialogReducerActionsTypes>;\ntype ThunkType = ThunkAction<void, AppStateType, unknown, DialogReducerActionsTypes>;\n\nexport const dialogsReduserActionCreators = {\n    setCurrentDialog: (selectedDialogId: number | null) => (\n        {\n            type: 'SET_CURRENT_DIALOG',\n            payload: {\n                selectedDialogId\n            }\n        } as const\n    ),\n    getMessagesSuccess: (messages: Array<DialogMessage>, currentDialogMessagesCount: number) => (\n        {\n            type: 'GET_MESSAGES_SUCCESS',\n            payload:\n                {\n                    messages,\n                    currentDialogMessagesCount\n                }\n        } as const\n    ),\n    putUpDialog: (userId: number) => (\n        {\n            type: 'PUT_UP_DIALOG',\n            userId\n        } as const\n    ),\n    setHasNewMessages: (userId: number, hasNewMessages: boolean) => (\n        {\n            type: 'SET_HAS_NEW_MESSAGES',\n            userId,\n            hasNewMessages,\n        } as const\n    ),\n    appendMessages: (messages: Array<DialogMessage>) => (\n        {\n            type: 'APPEND_MESSAGES',\n            messages\n        } as const\n    ),\n    addDeletedMessages: (messageId: string, restoredInterval: number) => (\n        {\n            type: 'ADD_DELETED_MESSAGES',\n            message:\n                {id: messageId, restoredInterval}\n        } as const\n    ),\n    restoreMessageSuccess: (messageId: string) => (\n        {\n            type: 'RESTORE_MESSAGE',\n            messageId\n        } as const\n    ),\n    deleteMessageForOwnerSuccess: (messageId: string) => (\n        {\n            type: 'DELETE_MESSAGE_FOR_OWNER',\n            messageId\n        } as const\n    ),\n    addToSpamSuccess: (messageId: string) => (\n        {\n            type: 'ADD_TO_SPAM_SUCCESS',\n            messageId\n        } as const\n    ),\n    getDialogsSuccess: (dialogs: Array<DialogType>) => (\n        {\n            type: 'GET_DIALOGS_SUCCESS',\n            payload: {\n                dialogs\n            }\n        } as const\n    ),\n    setNewMessagesCount: (newMessagesCount: number) => (\n        {\n            type: 'SET_NEW_MESSAGES_COUNT',\n            payload: {\n                newMessagesCount\n            }\n        }  as const\n    ),\n    setNeedRefresh: (needRefresh: boolean) => (\n        {\n            type: 'SET_NEED_REFRESH',\n            payload:\n                {\n                    needRefresh\n                }\n        }  as const\n    ) ,\n}","import React from 'react';\nimport s from './Buttons.module.css'\nimport cn from 'classnames'\n\ntype CommonButtonsPropsType = {\n    callback?: (e?: any) => void\n    name: string\n}\n\nexport const BigButton: React.FC<CommonButtonsPropsType> = (props) => {\n    return <button onClick={props.callback} className={s.button}>{props.name}</button>\n};\n\ntype SmallButtonPropsType = {\n    disabled?: boolean\n    className?: string\n    callback?: () => void\n    name: string\n}\n\nexport const SmallButton: React.FC<SmallButtonPropsType> = (props) => {\n    return <button onClick={props.callback} disabled={props.disabled}\n                   className={cn(s.smallButton, {[s.disabled]: props.disabled}, props.className)}>{props.name}</button>\n};\n\ntype PagesButtonPropsType = {\n    isVisible: boolean\n}\n\nexport const PagesButton: React.FC<CommonButtonsPropsType & PagesButtonPropsType> = (props) => {\n    return <button onClick={props.callback}\n                   className={cn(s.pagesButton, {[s.notVisible]: !props.isVisible})}>{props.name}</button>\n};\n\n\nexport const AddFileButton: React.FC<CommonButtonsPropsType> = (props) => {\n    return <div className={s.addFileButton}>\n        <label htmlFor=\"input\">{props.name}</label>\n        <input onChange={props.callback} type=\"file\" id=\"input\"/>\n    </div>\n};\n\n","import React from 'react';\nimport preloader from '../../assets/images/preloader.svg'\n\nconst Preloader: React.FC = () =>{\n    return <div>\n        <img src={preloader} alt=\"\" />\n    </div>\n};\n\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2MnG6\",\"loginBlock\":\"Header_loginBlock__U7kKN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"NotFound_img__2b7U0\",\"container\":\"NotFound_container__3zDzn\"};","import {profileAPI, ResultCodesEnum} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {ActionsTypes, AppStateType} from \"./redux-store\";\n\n\n\nlet initialState = {\n    postsData: [\n        {\n            id: 0,\n            message: 'Hi, how are you',\n            likesCount: 5,\n            img: \"https://yt3.ggpht.com/a/AGF-l78XZgyutXUlON-U4sTy-EwaZoBJXrqGvQ2kxg=s900-c-k-c0xffffffff-no-rj-mo\"\n        },\n        {\n            id: 1,\n            message: 'It\\'s my first post',\n            likesCount: 20,\n            img: \"https://yt3.ggpht.com/a/AGF-l78XZgyutXUlON-U4sTy-EwaZoBJXrqGvQ2kxg=s900-c-k-c0xffffffff-no-rj-mo\"\n        }\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: '',\n    newPostText: ''\n};\n\nexport type InitialStateType  = typeof initialState\n\nconst profileReducer = (state = initialState, action: ProfileReducerActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'ADD_POST':\n            let newPost = {\n                id: state.postsData.length,\n                message: action.newPostText,\n                likesCount: 0,\n                img: \"https://yt3.ggpht.com/a/AGF-l78XZgyutXUlON-U4sTy-EwaZoBJXrqGvQ2kxg=s900-c-k-c0xffffffff-no-rj-mo\"\n            };\n            return {\n                ...state,\n                postsData: [...state.postsData, newPost],\n                newPostText: ''\n            };\n        case 'SET_USER_PROFILE':\n            return {\n                ...state, profile: action.profile\n            };\n        case 'SET_STATUS':\n            return {\n                ...state, status: action.status\n            };\n        case 'DELETE_POST':\n            return {\n                ...state, postsData: state.postsData.filter(post => post.id.toString() !== action.postId)\n            };\n        case 'SAVE_PHOTO_SUCCESS':\n            return {\n                ...state, profile: {...state.profile, photos: action.photos} as ProfileType\n            };\n        case 'UPDATE_POST':\n            return {\n                ...state, postsData: state.postsData.map(p=>{\n                    if(p.id.toString()===action.postId) return {...p, message: action.message};\n                    else return p;\n                })\n            };\n        default:\n            return state;\n    }\n\n};\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch: any) => {\n    let data = await profileAPI.getProfile(userId);\n    dispatch(profileReducerActionCreators.setUserProfile(data));\n};\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch: any) => {\n    let status = await profileAPI.getStatus(userId);\n    dispatch(profileReducerActionCreators.setStatus(status))\n\n};\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch: any) => {\n        let response = await profileAPI.updateStatus(status);\n        if (response.resultCode === ResultCodesEnum.Success) dispatch(profileReducerActionCreators.setStatus(status))\n};\n\nexport const savePhoto = (file: any): ThunkType => async (dispatch: any) => {\n    let response = await profileAPI.savePhoto(file);\n    if (response.resultCode === ResultCodesEnum.Success) dispatch(profileReducerActionCreators.sevePhotoSuccess(response.data.photos))\n};\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: any) => {\n    const userId = getState().auth.userId;\n    let data = await profileAPI.saveProfile(profile);\n     /*  debugger;*/\n    if (data.resultCode === ResultCodesEnum.Success) {\n        dispatch(getUserProfile(userId));\n    } else {\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n        /*debugger;*/\n        if (message !== \"Some error\") {\n            // @ts-ignore\n            message = message.split(\"->\");\n            message = message[1].toLocaleLowerCase();\n            message = message.slice(0, message.length - 1);\n            dispatch(stopSubmit(\"profile-data\",  {\n                    // @ts-ignore\n                                                                    \"contacts\": {[message]:response.data.messages[0]}\n                                                                })\n                    );\n        } else {\n            // @ts-ignore\n            dispatch(stopSubmit(\"profile-data\", message));\n        }\n        // @ts-ignore\n        return Promise.reject(response.data.messages[0]);\n    }\n};\n\nexport default profileReducer;\n\ntype ProfileReducerActionsTypes = ActionsTypes<typeof profileReducerActionCreators>\n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ProfileReducerActionsTypes>;\n\nexport const profileReducerActionCreators = {\n addPost : (newPostText: string) => ({type: 'ADD_POST', newPostText} as const),\n deletePost : (postId: string) => ({type: 'DELETE_POST', postId} as const),\n setUserProfile : (profile: ProfileType) => ({type: 'SET_USER_PROFILE', profile} as const),\n setStatus : (status: string) => ({type: 'SET_STATUS', status} as const),\n sevePhotoSuccess : (photos: PhotosType) => ({type: 'SAVE_PHOTO_SUCCESS', photos} as const),\n    updatePost: (postId: string, message: string) =>\n        ({type: 'UPDATE_POST', postId, message} as const),\n};\n","export const updateObjectInArray = (items, itemId, objPropName, newObjProp) =>{\n    return items.map(i => {\n        if(i[objPropName] === itemId) return {...i, ...newObjProp};\n        return i;\n    });\n};","import {userAPI} from \"../api/api\";\nimport {updateObjectInArray} from \"../utils/object-helpers\";\nimport {UserType} from \"../types/types\";\nimport {Dispatch} from \"redux\";\nimport {ActionsTypes, AppStateType} from \"./redux-store\";\nimport {ThunkAction} from \"redux-thunk\";\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: [] as Array<number>, //array of urers ids\n};\n\ntype InitialStateType = typeof initialState;\n\nconst usersReducer = (state = initialState, action: UsersReducerActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\n            };\n        case 'UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\n            };\n        case 'SET_USERS':\n            return {...state, users: [...action.users]};\n\n        case 'SET_TOTAL_USERS_COUNT':\n            return {...state, totalUsersCount: action.totalUsersCount};\n\n        case 'SET_CURRENT_PAGE':\n            return {...state, currentPage: action.currentPage};\n\n        case 'TOGGLE_IS_FETCHING': {\n            return {...state, isFetching: action.isFetching}\n        }\n\n        case 'TOGGLE_FOLLOWING_IN_PROGRESS': {\n            return {\n                ...state, followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        }\n        default:\n            return state;\n    }\n\n};\n\nexport default usersReducer;\n\ntype UsersReducerActionsTypes = ActionsTypes<typeof usersReducerActionCreators>\n\ntype DispatchType = Dispatch<UsersReducerActionsTypes>\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, UsersReducerActionsTypes>;\n\nexport const requestUsers = (page: number, pageSize: number): ThunkType => {\n    return async (dispatch, getState) => {\n        dispatch(usersReducerActionCreators.toggleIsFetching(true));\n\n        let data = await userAPI.getUsers(page, pageSize);\n        dispatch(usersReducerActionCreators.toggleIsFetching(false));\n        dispatch(usersReducerActionCreators.setUsers(data.items));\n        dispatch(usersReducerActionCreators.setCurrentPage(page));\n        dispatch(usersReducerActionCreators.setTotalUsersCount(data.totalCount));\n    }\n};\n\nconst _followUnfollowFlow = async (\n    dispatch: DispatchType,\n    userId: number,\n    apiMethod: any,\n    actionCreator: (userId: number) => any\n) => {\n    dispatch(usersReducerActionCreators.toggleFollowingInProgress(true, userId));\n    let data = await apiMethod(userId);\n    if (data.resultCode === 0) dispatch(actionCreator(userId));\n    dispatch(usersReducerActionCreators.toggleFollowingInProgress(false, userId));\n};\n\nexport const follow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        _followUnfollowFlow(dispatch, userId, userAPI.follow.bind(userAPI), usersReducerActionCreators.followSuccess);\n    }\n};\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        _followUnfollowFlow(dispatch, userId, userAPI.unfollow.bind(userAPI), usersReducerActionCreators.unfollowSuccess);\n    }\n};\n\n\nexport const usersReducerActionCreators = {\n    followSuccess: (userId: number) => ({type: 'FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'UNFOLLOW', userId} as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SET_CURRENT_PAGE', currentPage} as const),\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'SET_TOTAL_USERS_COUNT', totalUsersCount} as const),\n    toggleIsFetching: (isFetching: boolean) => ({type: 'TOGGLE_IS_FETCHING', isFetching} as const),\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => ({\n        type: 'TOGGLE_FOLLOWING_IN_PROGRESS',\n        isFetching,\n        userId\n    } as const)\n};","module.exports = __webpack_public_path__ + \"static/media/preloader.ade7b44c.svg\";","module.exports = __webpack_public_path__ + \"static/media/logoSite.32fdec1a.png\";","module.exports = __webpack_public_path__ + \"static/media/404NotFound.1b28b096.jpg\";","module.exports = __webpack_public_path__ + \"static/media/oopsPhoto.23d24fde.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ErrorBoundary_container__1AWef\"};"],"sourceRoot":""}