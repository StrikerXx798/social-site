{"version":3,"sources":["common/FormsControls/FormsControls.tsx","common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.module.css","assets/images/userWithoutPhoto.jpg","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["FormControl","meta","touched","error","children","hasError","className","s","formControl","messageError","Textarea","props","input","restProps","Input","createField","placeholder","name","validate","component","classForDiv","text","module","exports","required","value","maxLengthCreator","length","Message","isDeleted","deletedMessages","find","m","id","oneMessage","cn","wrapper","notVuived","viewed","message","fromUser","ownerId","senderId","fromInterlocutor","deletedMessage","senderName","body","buttons","onClick","restoreMessage","deleteMessageForOwner","addMessageToSpam","DialogItem","path","user","undefined","dialogItem","to","activeClassName","active","dialog","src","photos","small","withoughtPhoto","alt","userName","hasNewMessages","newMessagesCount","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","key","messageElements","messages","MessagesComponent","containerMessages","buttonPrevMes","isVisible","currentDialogMessagesCount","dialogsItems","selectedDialogId","messageToSelectDialog","render","AddMessageReduxForm","onSubmit","newMessageBody","sendMessage","userId","maxLength50","reduxForm","form","handleSubmit","Field","mapStateToPropsForRedirect","isAuth","auth","DialogsContainer","this","init","prevProps","prevState","snapshot","updateDialog","setCurrentDialog","React","Component","mapDispatchToProps","getMessagesNewerThenLast","dialogsReduserActionCreators","compose","connect","RedirectComponent"],"mappings":"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","file":"static/js/5.1cde3ad4.chunk.js","sourcesContent":["import React from \"react\";\nimport s from \"./FormsControls.module.css\"\nimport {Field, WrappedFieldInputProps, WrappedFieldProps} from \"redux-form\";\nimport {FieldValidatorType} from \"../../utils/validators/validators\";\n\n\n\nexport const FormControl: React.FC<WrappedFieldProps> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return <div className={`${s.formControl} ${(hasError ? s.error : \"\")}`}>\n        {children}\n        {hasError && <div className={s.messageError}>\n            {error}\n        </div>}\n    </div>\n};\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\n};\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\n};\n\nexport function createField <FormKeysType extends string>  (\n    placeholder: string | undefined,\n    name: FormKeysType,\n    validate: Array<FieldValidatorType>,\n    component: string | React.FC<WrappedFieldProps>,\n    classForDiv: string | undefined,\n    props = {},\n    text = \"\" as string | null\n){\n    return (\n        <div className={classForDiv}>\n            <Field\n                placeholder={placeholder}\n                name={name}\n                validate={validate}\n                component={component}\n                {...props}/>\n            {text}\n        </div>\n    );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3zCp_\",\"error\":\"FormsControls_error__3JYew\",\"messageError\":\"FormsControls_messageError__28IDB\",\"formSummaryError\":\"FormsControls_formSummaryError__1mX5B\"};","export type FieldValidatorType = (value: string) => string | undefined;\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) return undefined;\n    return \"field is required\"\n};\n\n\nexport const maxLengthCreator = (length: number): FieldValidatorType => (value) =>{\n    if(value && value.length >= length) return `Max length is ${length} symbols`;\n    return undefined;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1BDi8\",\"messageToSelectDialog\":\"Dialogs_messageToSelectDialog__1QHyY\",\"dialogsItems\":\"Dialogs_dialogsItems__tckqV\",\"dialog\":\"Dialogs_dialog__2DvAn\",\"dialogItem\":\"Dialogs_dialogItem__2PD1m\",\"active\":\"Dialogs_active__1SWKo\",\"messages\":\"Dialogs_messages__2HF1k\",\"newMessagesCount\":\"Dialogs_newMessagesCount__NtKmc\",\"buttonPrevMes\":\"Dialogs_buttonPrevMes__2dcFY\",\"text\":\"Dialogs_text__HVFfX index_commonTextarea__UfkSC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1f9za\",\"senderName\":\"Message_senderName__2uFLb\",\"buttons\":\"Message_buttons__2RgGG\",\"deletedMessage\":\"Message_deletedMessage__1C4tW\",\"wrapper\":\"Message_wrapper__14E_9\",\"fromUser\":\"Message_fromUser__3CpwO\",\"fromInterlocutor\":\"Message_fromInterlocutor__o0yQ4\",\"notVuived\":\"Message_notVuived__3qkgM\"};","module.exports = __webpack_public_path__ + \"static/media/userWithoutPhoto.9bd7cc8a.jpg\";","import React, {useState} from 'react'\nimport s from './Message.module.css'\nimport PropTypes from 'prop-types'\nimport cn from 'classnames'\n\nconst Message = (props) => {\n\n    const isDeleted = !!props.deletedMessages.find(m => m.id ===props.oneMessage.id);\n\n    const deleteMessage = () => {\n        props.deleteMessageForOwner(props.oneMessage.id);\n    };\n    const restoreMessage = () => {\n        props.restoreMessage(props.oneMessage.id);\n    };\n\n    return (<div className={cn(s.wrapper, {[s.notVuived]: !props.oneMessage.viewed})}>\n            <div className={cn(s.message,\n                {\n                    [s.fromUser]: props.ownerId===props.oneMessage.senderId,\n                    [s.fromInterlocutor]: props.ownerId!==props.oneMessage.senderId,\n                    [s.deletedMessage] : isDeleted\n                }\n                )}>\n                <div className={s.senderName}>{props.oneMessage.senderName}: </div>\n                {!isDeleted ? props.oneMessage.body : \"message is deleted\"}\n                <div className={s.buttons}>\n                 <span onClick={!isDeleted ? deleteMessage : restoreMessage}>{!isDeleted ? \"delete for me\":\"restore\"}</span> | <span  onClick={()=>{props.addMessageToSpam(props.oneMessage.id)}}>spam</span>\n            </div>\n            </div>\n        </div>\n     )\n};\n\nexport default Message;\n\nMessage.propTypes = {\n     oneMessage: PropTypes.shape({\n          id: PropTypes.number,\n          name: PropTypes.string\n     })\n};\n","import React from 'react'\nimport s from './../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\nimport PropTypes from 'prop-types'\nimport withoughtPhoto from '../../../assets/images/userWithoutPhoto.jpg'\n\nconst DialogItem = (props) => {\n    let path = \"/dialogs/\" + props.user.id;\n    if(props.user.id!==undefined) return (\n        <div className={s.dialogItem}>\n            <NavLink to={path} activeClassName={s.active} className={s.dialog}>\n                <div>\n                    <img\n                        src={!!props.user.photos.small ? props.user.photos.small : withoughtPhoto}\n                        alt=\"ave\"/>\n                </div>\n                <div>{props.user.userName}</div>\n                {props.user.hasNewMessages&&<div className={s.newMessagesCount}>{props.user.newMessagesCount}</div>}\n            </NavLink>\n        </div>);\n        else return <div className={s.dialogItem}>not found</div>\n};\n\n\nexport default DialogItem;\n\nDialogItem.propTypes = {\n    user: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        img: PropTypes.string\n    })\n};","import React from 'react'\nimport s from './Dialogs.module.css'\nimport Message from \"./Message/Message\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator} from \"../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {BigButton, PagesButton} from \"../common/Buttons/Buttons\";\nimport {Route} from \"react-router-dom\";\n\nconst Dialogs = (props) => {\n    let state = props.dialogsPage;\n    let dialogsElements = state.dialogs.map(user => <DialogItem key={user.id} user={user}/>);\n    let messageElements = state.messages.map(oneMessage => <Message addMessageToSpam={props.addMessageToSpam} restoreMessage={props.restoreMessage} deletedMessages={state.deletedMessages} deleteMessageForOwner={props.deleteMessageForOwner} ownerId={props.ownerId} key={oneMessage.id}\n                                                                    oneMessage={oneMessage}/>);\n\n    const MessagesComponent = () => <div className={s.containerMessages}>\n        <div className={s.buttonPrevMes}>\n            <PagesButton isVisible={props.currentDialogMessagesCount > state.messages.length}\n                         name=\"show prev messages\"/>\n        </div>\n        {messageElements}\n    </div>;\n\n    const addNewMessage = (value) => {\n        if (value.newMessageBody) props.sendMessage(props.userId, value.newMessageBody);\n    };\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {state.selectedDialogId===null && <div className={s.messageToSelectDialog}>Please select dialog</div>}\n                {state.selectedDialogId!==null && <Route path={`/dialogs/${state.selectedDialogId}`} render={()=><MessagesComponent/>}/>}\n            </div>\n            {state.selectedDialogId!==null &&<AddMessageReduxForm onSubmit={addNewMessage}/>}\n        </div>\n    )\n};\n\nexport default Dialogs;\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n        <Field className={s.text} placeholder={\"Your message...\"}\n               name={\"newMessageBody\"} component={Textarea}\n               validate={[ maxLength50]}\n        />\n        <div>\n            <BigButton name=\"SEND\"/>\n        </div>\n    </form>\n};\n\nconst AddMessageReduxForm = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);\n\n","import React from 'react'\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n};\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to=\"/login\"/>;\n            return <Component {...this.props}/>\n        }\n    }\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n    return ConnectedAuthRedirectComponent;\n};","import {\n    addMessageToSpam,\n    deleteMessageForOwner,\n    getMessagesNewerThenLast,\n    init,\n    restoreMessage,\n    sendMessage,\n    dialogsReduserActionCreators,\n    updateDialog\n} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport React from 'react'\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nclass DialogsContainer extends React.Component {\n    componentDidMount() {\n        this.props.init(this.props.userId);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.userId != this.props.userId) {\n            this.props.updateDialog(this.props.userId);\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.setCurrentDialog(null);\n    }\n\n    render() {\n        return <Dialogs {...this.props} />\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n        ownerId: state.auth.userId,\n        currentDialogMessagesCount: state.dialogsPage.currentDialogMessagesCount\n    }\n};\n\nconst mapDispatchToProps = {\n    init,\n    updateDialog,\n    sendMessage,\n    getMessagesNewerThenLast,\n    setCurrentDialog: dialogsReduserActionCreators.setCurrentDialog,\n    deleteMessageForOwner,\n    restoreMessage,\n    addMessageToSpam\n};\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(DialogsContainer);\n\n"],"sourceRoot":""}